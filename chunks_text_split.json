["Introduction to Serialization", "Introduction", "Serialization is the process of taking an object from memory and converting it into a series of bytes so that it can be stored or transmitted over a network and then reconstructed later on, perhaps by a different program or in a different", "machine environment.", "Deserialization is the reverse action: taking serialized data and reconstructing the original object in memory. Many object-oriented programming languages support serialization natively, including, but not limited to:", "Java Ruby Python PHP C#", "For the duration of this module, we will only focus on Python and PHP; however, please note that the same concepts taught may be reapplied to most, if not all, languages that support serialization.", "PHP Serialization", "As an example, this is how we would serialize an array in PHP: Introduction to Serialization", "As you can see, $original_data is an array containing one string (\"HTB\"), one integer (123), and one double (7.77)", "Using the serialize function, the array is turned into bytes that represent the array", "We carry on to unserialize this serialized string and restore the original array as verified by the var_dump of $reconstructed_data.", "Serialized objects in PHP are easy to read, unlike serialized objects in many other languages, which may look like complete gibberish to the human eye, as you will see in the Python example, but before that, let's understand what the", "letters and numbers in the serialized data mean:", "Python Serialization", "Similar to the PHP example above, we will serialize an array in Python", "There are multiple libraries for Python which implement serialization, such as PyYAML and JSONpickle", "However, Pickle is the native implementation, and it is what will be used in this example.", "Introduction to Serialization", "Reading the serialized data pickle outputs is much harder than reading the output PHP provides", "However, it is still possible", "According to comments in the pickle library, a pickle is a program for a virtual pickle machine (PM)", "The PM contains a stack and a memo (long-term memory), and a pickled object is just a sequence of opcodes for the PM to execute, which will recreate an arbitrary object on the stack.", "The PM's stack is a Last-In-First-Out (LIFO) data structure. You may push items onto the top of the stack, and you may pop the top object off of the stack.", "Quoting from comments in the pickle library, the PM's memo is a \"data structure which remembers which objects the pickler has already seen, so that shared or recursive objects are pickled by reference and not by value.\"", "In Lib/pickle.py (Python 3.10), we can see all of the pickle opcodes defined, and by referring to them, as well as the source code for the various pickling functions, we can piece together what our serialized_data does exactly when it is", "passed to pickle.loads():"]